#	 3 "green":	beforenoon-midnight (rest only morning)
#	 4 "orange": afternoon with short rest on everning
#	 5 "yellow": afternoon-midnight(over 12) with short rest on everning
#	 6 "red": afternoon-midnight(over 12) with short rest on morning
Mode=-1
if(nrow(PredatorPeaks)==0){
Mode = 0
}else if(nrow(PredatorPeaks)==1){
if(12 < PredatorPeaks$lower[1] && PredatorPeaks$upper[1] <= 24){
#predation is start after 0 pm and finish before 0am
Mode = 1
}
}else if(nrow(PredatorPeaks)==2){
if(PredatorPeaks$lower[1]==1 && PredatorPeaks$upper[1] < 9 &&
12 < PredatorPeaks$lower[2] && PredatorPeaks$upper[2] == 24){
#predation is start after 0pm and finish between [0pm : 9am].
Mode = 2
}else if(PredatorPeaks$lower[1]==1 && PredatorPeaks$upper[1] < 9 &&
PredatorPeaks$upper[1] < PredatorPeaks$lower[2] && PredatorPeaks$upper[2] == 24){
#predation is start beforenoon[9am:0pm], and finish before 9 am
Mode = 3
}else if(12 < PredatorPeaks$lower[1] && PredatorPeaks$upper[1] < 24 &&
PredatorPeaks$upper[1] < PredatorPeaks$lower[2] && PredatorPeaks$upper[2] <= 24){
#predation is start after 0pm, and finish before 0am with short rest.
Mode = 4
}
}else if(nrow(PredatorPeaks)==3){
if(PredatorPeaks$lower[1]==1 && PredatorPeaks$upper[1] < 9 &&
12 < PredatorPeaks$lower[2] && PredatorPeaks$upper[2] < 24&&
PredatorPeaks$upper[2] < PredatorPeaks$lower[3] && PredatorPeaks$upper[3] == 24){
#predation is start after 0pm, and finish between [0pm : 9am]. short rest at between [0pm : 0am].
Mode = 5
}else if(PredatorPeaks$lower[1]==1 && PredatorPeaks$upper[1] < 9 &&
PredatorPeaks$upper[1] < PredatorPeaks$lower[2] && PredatorPeaks$upper[2] < 9&&
12 < PredatorPeaks$lower[3] && PredatorPeaks$upper[3] == 24){
#predation is start after 0pm, and finish between [0pm : 9am]. short rest at between [0pm : 9am].
Mode = 6
}
}
PredatorMode.mx[x.i,y.i] = Mode
}
}
image(x.seq,y.seq,PredatorMode.mx,zlim=c(-1,6),col=c("black","grey","blue","cyan","green","orange","yellow","red"))
# 2x2x2 comparison
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
#TempSwimSpeed_v1_02
#   Predator efficiency
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
tss_probforage_energygain_optimize
tss_probforage_energygain_optimize
#TempSwimSpeed_v1_03
#   Predator efficiency
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
pi = acos(-1)
tnum = 24
t = 0:23+0.5
vmin = 1.5
vmax = 2.5
vmaxt = 18
umin = 0.5
umax = 2.0
umaxt = 15
#Define the speed of predator (V) and prey (U) at each time step
V = vmin + (vmax - vmin)*(cos(2*pi*(t-vmaxt)/tnum)+1)/2
U = umin + (umax - umin)*(cos(2*pi*(t-umaxt)/tnum)+1)/2
K = rep(0.01, length=tnum)		#amount of food availability for prey
C = rep(0.02, length=tnum)		#metaboric cost for predators when they go out for predation
L = 0.2+0.8*exp(-2.0*cos(2*pi*t/tnum))/exp(2.0)	#influence of light on the predation rate
#following three parameters determine the prey traits
e = 0.0		#relative risk of predation for resting prey
d = 0.001		#relative density of predator/prey
#[NEW 18/07/16] influence of swim speed on foraging efficiency
omega = 0	#obtained reward is alpha*((1-omega)+omega*U)
#following two parameters determine the predation rate: a*(v-u)^b / {1 + h*a*(v-u)^b}
b = 3.0		#non-linear influence of speed difference
h = 2.0		#handling time for predation a prey
#following twp parameters determine the cost of prey
cb = 0.0001	#metabolic cost for prey (should pay both for resting and foraging)
cf	= 0.0001	#foraging cost for prey (should pay only for foraging)
#Variation of model
#if we set d=0, the prey decide their behaviour only based on the food availability for them regardless of the predation.
# d = 0.0
#
#if we set b=0, the swim speed (i.e., temperature) has no influence on the predation rate.
# b = 0.0
#
#if fix the V and U as constant values, the influence of temperature is ignored in this model.
# V=seq(1.5, length=tnum)
# U=seq(1.2, length=tnum)
#Optimization
#Because prey have discrete choice (f = 0, f* or 1 where f* is the threshold prey frequency for predators activity),
#there are two potential optimal behaviour of prey (before and after the peak of fitness)
#Return values include the following members
#	Prey		Optimal prey behaviour
#	PreyW		Fitness of prey
#	Predator	Optimal predator behaviour
#	PredatorW	Fitness of predator
#	ThresholdPreyFreq	The threshold prey frequency for predators activity f*
#	PreyReward	Reward of prey (independent from the strategy of prey/predators)
#	PreyCost0	Cost of prey caused by predation when f=0
#	PreyCostF	Cost of prey caused by predation when f=f*
#	PreyCost1	Cost of prey caused by predation f=1
Ans = tss_probforage_energygain_optimize(V, U, K, C, L, d, e, omega, b, h,cb,cf)
plot(0,0,type="n",xlim=c(0,tnum),ylim=c(0,max(c(vmax,umax))))
lines(t,Ans$Predator,col="red",lwd=3)
lines(t,Ans$Prey,col="blue",lwd=3)
points(t,V,col="red")
lines(t,V,col="red")
points(t,U,col="blue")
lines(t,U,col="blue")
points(t,L,col="black")
lines(t,L,col="black")
lines(t,C,col="red",lty=3)
lines(t,K,col="blue",lty=3)
#Optimal prey behaviour f
#	grey color is the difference of upper and lower optimal points.
barplot(rbind(Ans$Prey,Ans$Prey-Ans$Prey),xlab="time")
points(1:length(Ans$Prey)+0.5,Ans$ThresholdPreyFreq)
#Optimal predatpr behaviour p
#	grey color is the difference of upper and lower optimal points.
barplot(rbind(Ans$Predator),xlab="time")
#Mortality rate at each time step
#Mortality rate at each time step
plot(Ans$PreyCost1,type="b",pch=19,xlab="time",ylab= "predation risk", col="red")
lines(Ans$PreyCostF,type="b",pch=19,xlab="time",ylab= "predation risk", col="green")
lines(Ans$PreyCost0,type="b",pch=19,xlab="time",ylab= "predation risk")
lines(Ans$PreyReward,type="b",pch=19,xlab="time",ylab= "predation risk",col="blue")
#Mortality rate at each time step
plot(Ans$PreyCost,type="b",pch=19,xlab="time",ylab= "predation risk", col="red")
#lines(Ans$PreyCostF,type="b",pch=19,xlab="time",ylab= "predation risk", col="green")
#lines(Ans$PreyCost0,type="b",pch=19,xlab="time",ylab= "predation risk")
lines(Ans$PreyReward,type="b",pch=19,xlab="time",ylab= "predation risk",col="blue")
PreyReward
Ans$PreyReward
plot(Ans$PredatorReward,type="b",pch=19,xlab="time",ylab= "predation risk",col="blue")
lines(Ans$PredatorCost,type="b",pch=19,xlab="time",ylab= "predation risk",col="red")
#Mortality rate at each time step
plot(rep(1:length(Ans$PreyCost,times=2),c(Ans$PreyCost,Ans$PredatorCost),type="b",pch=19,xlab="time",ylab= "predation risk", col="red")
)
#Mortality rate at each time step
plot(rep(1:length(Ans$PreyCost,times=2)),c(Ans$PreyCost,Ans$PredatorCost),type="b",pch=19,xlab="time",ylab= "predation risk", col="red")
#Mortality rate at each time step
plot(rep(1:length(Ans$PreyCost),times=2),c(Ans$PreyCost,Ans$PredatorCost),type="b",pch=19,xlab="time",ylab= "predation risk", col="red")
#lines(Ans$PreyCostF,type="b",pch=19,xlab="time",ylab= "predation risk", col="green")
lines(Ans$PreyCost,type="b",pch=19,xlab="time",ylab= "predation risk",col="red")
lines(Ans$PreyReward,type="b",pch=19,xlab="time",ylab= "predation risk",col="blue")
plot(rep(1:length(Ans$PreyCost),times=2),c(Ans$PreyCost,Ans$PredatorCost),type="n",pch=19,xlab="time",ylab= "predation risk", col="red")
#lines(Ans$PreyCostF,type="b",pch=19,xlab="time",ylab= "predation risk", col="green")
lines(Ans$PreyCost,type="b",pch=19,xlab="time",ylab= "predation risk",col="red")
lines(Ans$PreyReward,type="b",pch=19,xlab="time",ylab= "predation risk",col="blue")
plot(rep(1:length(Ans$PredatorReward),times=2),c(Ans$PredatorReward,Ans$PredatorCost),type="n",pch=19,xlab="time",ylab= "predation risk", col="red")
lines(Ans$PredatorReward,type="b",pch=19,xlab="time",ylab= "predation risk",col="blue")
lines(Ans$PredatorCost,type="b",pch=19,xlab="time",ylab= "predation risk",col="red")
hist.find_peaks = function(hist,min,max,n=101){
threshold.mx = matrix(rep(seq(min,max,length=n),each=length(hist)+2),length(hist)+2,n)
hist.mx = matrix(rep(c(0,hist,0),times=n),length(hist)+2,n)
exist.mx = hist.mx>threshold.mx
result = apply(exist.mx[-1,]!=exist.mx[-nrow(exist.mx),],2,sum)/2
result.table = table(result)
peak.num = as.integer(names(result.table)[order(result.table,decreasing=TRUE)[1]])
threshold.no = min((1:n)[result==peak.num])
exist.seq = exist.mx[,threshold.no]
peaks = data.frame("lower"=NA,"upper"=NA,"top"=NA,"freq"=NA)
if(peak.num!=0){
boundary = 1
lower = (1:(length(exist.seq)-1))[exist.seq[-1]&(!exist.seq[-length(exist.seq)])]
upper = (0:(length(exist.seq)))[(!exist.seq[-1])&exist.seq[-length(exist.seq)]]
for(peak.pos in 1:peak.num){
this.lower = min((boundary:lower[peak.pos])[hist[boundary:lower[peak.pos]]>0])
if(peak.pos<peak.num){
boundary = (upper[peak.pos]:lower[peak.pos+1])[order(hist[upper[peak.pos]:lower[peak.pos+1]])[1]]
}else{
boundary = length(hist)
}
this.upper = max((upper[peak.pos]:(boundary-1))[hist[upper[peak.pos]:(boundary-1)]>0])
this.top = (this.lower:this.upper)[order(hist[this.lower:this.upper],decreasing = TRUE)[1]]
this.freq = sum(hist[this.lower:this.upper])
peaks = rbind(peaks,data.frame("lower"=this.lower,"upper"=this.upper,"top"=this.top,"freq"=this.freq))
}
}
return(peaks[-1,])
}
calc.shark.temp = function(tnum,watertemp,sharkradius,skinthickness){
# calculate shark temp by iteration
sharktemp=seq(25,25,length.out=tnum)
for (ii in c(1:20)) {
for (jj in c(1:24)) {
ii
jj
# from conduction physics
Q=-2*0.6*(sharktemp[jj]-watertemp[jj])/(sharkradius*log(sharkradius/(sharkradius-skinthickness)))
# result is in Watts per minute
# change to celsius per hour
Q=Q*0.031593/60
if (jj==24){sharktemp[1]=sharktemp[jj]+Q}
if (jj<24){sharktemp[jj+1]=sharktemp[jj]+Q}
#    print(jj)
#    print(Q)
#    print(sharktemp[jj]+Q)
#    Sys.sleep(0.01)
}
}
return(sharktemp)
}
# 2x2x2 comparison
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
hist.find_peaks = function(hist,min,max,n=101){
threshold.mx = matrix(rep(seq(min,max,length=n),each=length(hist)+2),length(hist)+2,n)
hist.mx = matrix(rep(c(0,hist,0),times=n),length(hist)+2,n)
exist.mx = hist.mx>threshold.mx
result = apply(exist.mx[-1,]!=exist.mx[-nrow(exist.mx),],2,sum)/2
result.table = table(result)
peak.num = as.integer(names(result.table)[order(result.table,decreasing=TRUE)[1]])
threshold.no = min((1:n)[result==peak.num])
exist.seq = exist.mx[,threshold.no]
peaks = data.frame("lower"=NA,"upper"=NA,"top"=NA,"freq"=NA)
if(peak.num!=0){
boundary = 1
lower = (1:(length(exist.seq)-1))[exist.seq[-1]&(!exist.seq[-length(exist.seq)])]
upper = (0:(length(exist.seq)))[(!exist.seq[-1])&exist.seq[-length(exist.seq)]]
for(peak.pos in 1:peak.num){
this.lower = min((boundary:lower[peak.pos])[hist[boundary:lower[peak.pos]]>0])
if(peak.pos<peak.num){
boundary = (upper[peak.pos]:lower[peak.pos+1])[order(hist[upper[peak.pos]:lower[peak.pos+1]])[1]]
}else{
boundary = length(hist)
}
this.upper = max((upper[peak.pos]:(boundary-1))[hist[upper[peak.pos]:(boundary-1)]>0])
this.top = (this.lower:this.upper)[order(hist[this.lower:this.upper],decreasing = TRUE)[1]]
this.freq = sum(hist[this.lower:this.upper])
peaks = rbind(peaks,data.frame("lower"=this.lower,"upper"=this.upper,"top"=this.top,"freq"=this.freq))
}
}
return(peaks[-1,])
}
calc.shark.temp = function(tnum,watertemp,sharkradius,skinthickness){
# calculate shark temp by iteration
sharktemp=seq(25,25,length.out=tnum)
for (ii in c(1:20)) {
for (jj in c(1:24)) {
ii
jj
# from conduction physics
Q=-2*0.6*(sharktemp[jj]-watertemp[jj])/(sharkradius*log(sharkradius/(sharkradius-skinthickness)))
# result is in Watts per minute
# change to celsius per hour
Q=Q*0.031593/60
if (jj==24){sharktemp[1]=sharktemp[jj]+Q}
if (jj<24){sharktemp[jj+1]=sharktemp[jj]+Q}
#    print(jj)
#    print(Q)
#    print(sharktemp[jj]+Q)
#    Sys.sleep(0.01)
}
}
return(sharktemp)
}
# 2x2x2 comparison
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
View(tss_probforage_energygain_optimize_linear)
View(tss_probforage_energygain_optimize_linear)
View(tss_probforage_energygain_optimize_linear)
hist.find_peaks = function(hist,min,max,n=101){
threshold.mx = matrix(rep(seq(min,max,length=n),each=length(hist)+2),length(hist)+2,n)
hist.mx = matrix(rep(c(0,hist,0),times=n),length(hist)+2,n)
exist.mx = hist.mx>threshold.mx
result = apply(exist.mx[-1,]!=exist.mx[-nrow(exist.mx),],2,sum)/2
result.table = table(result)
peak.num = as.integer(names(result.table)[order(result.table,decreasing=TRUE)[1]])
threshold.no = min((1:n)[result==peak.num])
exist.seq = exist.mx[,threshold.no]
peaks = data.frame("lower"=NA,"upper"=NA,"top"=NA,"freq"=NA)
if(peak.num!=0){
boundary = 1
lower = (1:(length(exist.seq)-1))[exist.seq[-1]&(!exist.seq[-length(exist.seq)])]
upper = (0:(length(exist.seq)))[(!exist.seq[-1])&exist.seq[-length(exist.seq)]]
for(peak.pos in 1:peak.num){
this.lower = min((boundary:lower[peak.pos])[hist[boundary:lower[peak.pos]]>0])
if(peak.pos<peak.num){
boundary = (upper[peak.pos]:lower[peak.pos+1])[order(hist[upper[peak.pos]:lower[peak.pos+1]])[1]]
}else{
boundary = length(hist)
}
this.upper = max((upper[peak.pos]:(boundary-1))[hist[upper[peak.pos]:(boundary-1)]>0])
this.top = (this.lower:this.upper)[order(hist[this.lower:this.upper],decreasing = TRUE)[1]]
this.freq = sum(hist[this.lower:this.upper])
peaks = rbind(peaks,data.frame("lower"=this.lower,"upper"=this.upper,"top"=this.top,"freq"=this.freq))
}
}
return(peaks[-1,])
}
calc.shark.temp = function(tnum,watertemp,sharkradius,skinthickness){
# calculate shark temp by iteration
sharktemp=seq(25,25,length.out=tnum)
for (ii in c(1:20)) {
for (jj in c(1:24)) {
ii
jj
# from conduction physics
Q=-2*0.6*(sharktemp[jj]-watertemp[jj])/(sharkradius*log(sharkradius/(sharkradius-skinthickness)))
# result is in Watts per minute
# change to celsius per hour
Q=Q*0.031593/60
if (jj==24){sharktemp[1]=sharktemp[jj]+Q}
if (jj<24){sharktemp[jj+1]=sharktemp[jj]+Q}
#    print(jj)
#    print(Q)
#    print(sharktemp[jj]+Q)
#    Sys.sleep(0.01)
}
}
return(sharktemp)
}
# 2x2x2 comparison
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
pi = acos(-1)
tnum = 24 # time of day
t = 0:23+0.5
# influence of light on the predation rate
lmin=0.0 # lowest
lmax=1.0 # highest
lwave=exp(-1.0*cos(2*pi*(tnum/2-t)/tnum))/exp(1.0)
# temperature of the water
tempmaxt=15
tmin = 25
tmax = 30
watertemp=tmin+(tmax-tmin)*(cos(2*pi*(t-tempmaxt)/tnum)+1)/2
#watertemp=seq(0,0,length.out=length(watertemp))+tmin+(tmax-tmin)/2
# prey immediately track temperature
umin = 1.0
utemp = 0.25
U = umin + utemp*(watertemp-min(watertemp))
# work out the shark's body temperature
sharkradius=0.2
skinthickness=sharkradius/20
sharktemp=calc.shark.temp(tnum,watertemp,sharkradius,skinthickness)
# sharks track their own temperature
vmin = 2.0
vtemp = utemp
V = vmin + vtemp*(sharktemp-min(sharktemp))
#amount of food availability for prey
alpha = rep(0.02, length=tnum)
#[NEW 18/07/16] influence of swim speed on foraging efficiency
omega = 0	#obtained reward is alpha*((1-omega)+omega*U)
#metabolic cost for predators when they go out for predation
C = rep(0.02, length=tnum)
#following three parameters determine the prey traits
phi = 0.15		#relative risk of predation for resting prey
#following three parameters determine the predation rate: a*(v-u)^beta / {1 + h*a*(v-u)^beta}
beta = 1.0		#non-linear influence of speed difference
h = 2.0	  #handling time for predation a prey
#following twp parameters determine the cost of prey
mb = 0.01	# basleline cost for prey (should pay both for resting and foraging)
mx	= 0.01	# foraging cost for prey (should pay only for foraging)
my = 0.1	#relative density of predator/prey
i=5
#if we set beta=0, the swim speed (i.e., temperature) has no influence on the predation rate.
beta = 1.0*(i>4)
#	lmin = 0.5-0.5*((i+1) %% 2)
#	lmax = 0.5+0.5*((i+1) %% 2)
# vary the magnitude of other predation
#	mx = 0.01*((i+1) %% 2)
alpha = rep(0.01+0.09*(((i+1) %% 2)), length=tnum)
# vary the magnitude of shark predation
my = 0.1*(((i+1) %% 4)<2)
# find solution
Ans = tss_probforage_energygain_optimize(V, U, alpha, C, lmin+(lmax-lmin)*lwave, my, phi, omega, beta, h,mb,mx)
Ans
sum(Ans$PreyReward)
(1-exp(sum(Ans$PreyReward)))/sum(Ans$PreyCost)
Ans$PreyW
(1-exp(-sum(Ans$PreyReward)))/sum(Ans$PreyCost)
sum(Ans$PredatorReward)-sum(Ans$PredatorCost)
Ans$PredatorW
Prey= Ans$Prey
Predator = Ans$Predator
plot(0,0,type="n",
xlab="time (t)",ylab="foraging predator (red), prey (blue)",
xlim=c(0,tnum),ylim=c(-0.02,1.02),
main=bquote(list('l'[1] == .(lmax-lmin), beta==.(beta),phi==.(phi),'m'['y']==.(my),'m'['b']==.(mb),'m'['x']==.(mx))))
lines(t,Predator*0.99,col="red",lwd=3,lty="dashed")
lines(t,Prey,col="blue",lwd=3)
# find solution
Ans = tss_probforage_energygain_optimize_linear(V, U, alpha, C, lmin+(lmax-lmin)*lwave, my, phi, omega, beta, h,mb,mx)
#Summarized figure
Prey= Ans$Prey
Predator = Ans$Predator
plot(0,0,type="n",
xlab="time (t)",ylab="foraging predator (red), prey (blue)",
xlim=c(0,tnum),ylim=c(-0.02,1.02),
main=bquote(list('l'[1] == .(lmax-lmin), beta==.(beta),phi==.(phi),'m'['y']==.(my),'m'['b']==.(mb),'m'['x']==.(mx))))
lines(t,Predator*0.99,col="red",lwd=3,lty="dashed")
lines(t,Prey,col="blue",lwd=3)
hist.find_peaks = function(hist,min,max,n=101){
threshold.mx = matrix(rep(seq(min,max,length=n),each=length(hist)+2),length(hist)+2,n)
hist.mx = matrix(rep(c(0,hist,0),times=n),length(hist)+2,n)
exist.mx = hist.mx>threshold.mx
result = apply(exist.mx[-1,]!=exist.mx[-nrow(exist.mx),],2,sum)/2
result.table = table(result)
peak.num = as.integer(names(result.table)[order(result.table,decreasing=TRUE)[1]])
threshold.no = min((1:n)[result==peak.num])
exist.seq = exist.mx[,threshold.no]
peaks = data.frame("lower"=NA,"upper"=NA,"top"=NA,"freq"=NA)
if(peak.num!=0){
boundary = 1
lower = (1:(length(exist.seq)-1))[exist.seq[-1]&(!exist.seq[-length(exist.seq)])]
upper = (0:(length(exist.seq)))[(!exist.seq[-1])&exist.seq[-length(exist.seq)]]
for(peak.pos in 1:peak.num){
this.lower = min((boundary:lower[peak.pos])[hist[boundary:lower[peak.pos]]>0])
if(peak.pos<peak.num){
boundary = (upper[peak.pos]:lower[peak.pos+1])[order(hist[upper[peak.pos]:lower[peak.pos+1]])[1]]
}else{
boundary = length(hist)
}
this.upper = max((upper[peak.pos]:(boundary-1))[hist[upper[peak.pos]:(boundary-1)]>0])
this.top = (this.lower:this.upper)[order(hist[this.lower:this.upper],decreasing = TRUE)[1]]
this.freq = sum(hist[this.lower:this.upper])
peaks = rbind(peaks,data.frame("lower"=this.lower,"upper"=this.upper,"top"=this.top,"freq"=this.freq))
}
}
return(peaks[-1,])
}
calc.shark.temp = function(tnum,watertemp,sharkradius,skinthickness){
# calculate shark temp by iteration
sharktemp=seq(25,25,length.out=tnum)
for (ii in c(1:20)) {
for (jj in c(1:24)) {
ii
jj
# from conduction physics
Q=-2*0.6*(sharktemp[jj]-watertemp[jj])/(sharkradius*log(sharkradius/(sharkradius-skinthickness)))
# result is in Watts per minute
# change to celsius per hour
Q=Q*0.031593/60
if (jj==24){sharktemp[1]=sharktemp[jj]+Q}
if (jj<24){sharktemp[jj+1]=sharktemp[jj]+Q}
#    print(jj)
#    print(Q)
#    print(sharktemp[jj]+Q)
#    Sys.sleep(0.01)
}
}
return(sharktemp)
}
# 2x2x2 comparison
library("Rcpp")
library("BH")
sourceCpp("TempSwimSpeedOptim.cpp")
pi = acos(-1)
pi = acos(-1)
tnum = 24 # time of day
t = 0:23+0.5
# influence of light on the predation rate
lmin=0.0 # lowest
lmax=1.0 # highest
lwave=exp(-1.0*cos(2*pi*(tnum/2-t)/tnum))/exp(1.0)
# temperature of the water
tempmaxt=15
tmin = 25
tmax = 30
watertemp=tmin+(tmax-tmin)*(cos(2*pi*(t-tempmaxt)/tnum)+1)/2
#watertemp=seq(0,0,length.out=length(watertemp))+tmin+(tmax-tmin)/2
# prey immediately track temperature
umin = 1.0
utemp = 0.25
U = umin + utemp*(watertemp-min(watertemp))
# work out the shark's body temperature
sharkradius=0.2
skinthickness=sharkradius/20
sharktemp=calc.shark.temp(tnum,watertemp,sharkradius,skinthickness)
# sharks track their own temperature
vmin = 2.0
vtemp = utemp
V = vmin + vtemp*(sharktemp-min(sharktemp))
#amount of food availability for prey
alpha = rep(0.02, length=tnum)
#[NEW 18/07/16] influence of swim speed on foraging efficiency
omega = 0	#obtained reward is alpha*(1+omega*U)
#metabolic cost for predators when they go out for predation
C = rep(0.02, length=tnum)
#following three parameters determine the prey traits
phi = 0.15		#relative risk of predation for resting prey
#following three parameters determine the predation rate: a*(v-u)^beta / {1 + h*a*(v-u)^beta}
beta = 1.0		#non-linear influence of speed difference
h = 2.0	  #handling time for predation a prey
#following twp parameters determine the cost of prey
mb = 0.01	# basleline cost for prey (should pay both for resting and foraging)
mx	= 0.01	# foraging cost for prey (should pay only for foraging)
my = 0.1	#relative density of predator/prey
# find solution
Ans = tss_probforage_energygain_optimize(V, U, alpha, C, lmin+(lmax-lmin)*lwave, my, phi, omega, beta, h,mb,mx)
#Summarized figure
Prey= Ans$Prey
Predator = Ans$Predator
plot(0,0,type="n",
xlab="time (t)",ylab="foraging predator (red), prey (blue)",
xlim=c(0,tnum),ylim=c(-0.02,1.02),
main=bquote(list('l'[1] == .(lmax-lmin), beta==.(beta),phi==.(phi),'m'['y']==.(my),'m'['b']==.(mb),'m'['x']==.(mx))))
lines(t,Predator*0.99,col="red",lwd=3,lty="dashed")
lines(t,Prey,col="blue",lwd=3)
